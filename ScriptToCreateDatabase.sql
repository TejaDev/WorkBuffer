/*
Created by Harold Pardue, 1/15/2016
Tables from "IT Projects and Tasks" were imported to ProjectTasks from an Access database

In order to take full advantage of the Entity Framework and scaffolding in MVC, I
needed to revise the existing database in the following way:
	Fully normalize tables
	Add primary and foreign keys constraints (using surrogate keys - IDENTITY)
	Add referential constraints
	Set foreign keys to NOT NULL
	Correct inconsistent data (Parent/Child)
	Provide a defualt value for foreign key attributes containing NULL values (and a few other attributes)
	Remove data redundancy
	Also: Revised attribute names to MixedCase to eliminate spaces (to simplify writing SQL)

(over 900 lines of script...)

For the purposes of simplifying the demonstration project, not all relationships were revised and included in the demo.
In those cases, the original data was left as is.

Original imported tables:

Categories
Contacts
Filters
Groups
Projects
Publicity
Statuses
SubCategories
SwitchBoard_Items
Tasks

New Tables:

tlbCompany
tblContact
tblStatus
tblGroup
tblSubCategory
tblPhase
tblPublicity
tblEndUser
tblProject
tblTask

Note: this script is not written to run as a single batch. This script is intended to
document the changes made to the original tables.

*/

use ProjectTasks;

--Examine existing tables
SELECT * FROM Categories;
SELECT * FROM Contacts;
SELECT * FROM Filters;
SELECT * FROM Groups;
SELECT * FROM Projects;
SELECT * FROM Publicity;
SELECT * FROM Statuses;
SELECT * FROM SubCategories;
SELECT * FROM SwitchBoard_Items;
SELECT * FROM Tasks;


--Proceed one original table at a time 
/*
Basic steps
1. Evaluation imported table
2. Modify existing data as neeeded
3. Define new "many" table
4. Populate new "many" table
5. Link new "many" table to corresponding "1" table using old key values
6. Drop old key column
7. Create referential integrity constraint
8. Set foreign key as NOT NULL
9. Test


*/


/*
The presence of CompanyName in Contacts is not fully normalized to 3NF.
Pull out companyname and create new table with autogenerated primary key.
Link new table to contacts table.
Enforce referential integrity
Make FK attribute non nullable
*/

--Master record
SELECT * FROM tblProject WHERE ProjectID = 858;

--Details
SELECT * FROM tblTask WHERE ProjectID = 858; -- id = 858




----------------- Company ---------------------

--Create a table for Company information
CREATE TABLE tblCompany
(
 CompanyID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
 CompanyName VARCHAR(500) NOT NULL
)

--Add company data to table
INSERT tblCompany (CompanyName)
SELECT DISTINCT Company
FROM Contacts
WHERE Company IS NOT NULL;

SELECT * FROM tblCompany;

----------------- Contact ---------------------

--Create contact table
CREATE TABLE tblContact
(ContactID INT IDENTITY(1000,1) NOT NULL PRIMARY KEY,
 LastName VARCHAR(255),
 FirstName VARCHAR(255),
 [5+2] VARCHAR(255),
 Badge VARCHAR(255),
 Email VARCHAR(255),
 JobTitle VARCHAR(255),
 BusinessPhone VARCHAR(255),
 MobilePhone VARCHAR(255),
 CompanyID INT,
 Company VARCHAR(255) --use this to link new table with old  
)

--Remove NULL values in Foreign Key attribute
SELECT * FROM Contacts WHERE Company IS NULL;

--Add "missing" as an option for missing company data
INSERT INTO tblCompany (CompanyName) VALUES ('missing');

--Update Contacts
UPDATE Contacts SET Company = 'missing' WHERE Company IS NULL;

--Turn off identity checking for the INSERT
--Essentially this allows us to create an autogenerated surrogate key on an existing "key".
SET IDENTITY_INSERT tblContact ON

INSERT INTO tblContact (ContactID, LastName, FirstName, [5+2], Badge, Email, JobTitle, BusinessPhone, MobilePhone, Company)
SELECT ID, [Last Name], [First Name], [5+2], Badge, [E-mail Address], [Job Title], [Business Phone], [Mobile Phone], Company
FROM Contacts;

SET IDENTITY_INSERT tblContact OFF

SELECT * FROM tblContact;

--Link table with corresponding "1' table by inserting FK values
UPDATE tblContact
SET tblContact.CompanyID=tblCompany.CompanyID
FROM tblContact, tblCompany
WHERE tblContact.company=tblCompany.CompanyName

SELECT * FROM tblContact;

--Drop Company name from tblContact now that we have linked the two tables
ALTER TABLE tblContact
DROP COLUMN company;

SELECT * FROM tblContact;

--Enforce referential constraint
ALTER TABLE tblContact
ADD CONSTRAINT fk_CompanyContact
FOREIGN KEY (CompanyID)
REFERENCES tblCompany(CompanyID);

--Make FK required
ALTER TABLE tblContact
ALTER COLUMN CompanyID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblContact INNER JOIN tblCompany on tblContact.CompanyID=tblCompany.CompanyID;

----------------- Status ---------------------

--Not sure why id is included in the status name. This can be derived in the query.
--Visual cue for user regarding precedence of status?
SELECT * FROM Statuses;

CREATE TABLE tblStatus
(
 StatusID INT IDENTITY(20,1) NOT NULL PRIMARY KEY,
 StatusName VARCHAR(255) NOT NULL
);

SELECT * FROM tblStatus;

SET IDENTITY_INSERT tblStatus ON

--Insert data from old table
INSERT INTO tblStatus (StatusID, StatusName)
SELECT id, Status
FROM Statuses;

SET IDENTITY_INSERT tblStatus OFF

SELECT * FROM tblStatus;


----------------- Group ---------------------

SELECT * FROM Groups;

CREATE TABLE tblGroup
(
 GroupID INT IDENTITY(20,1) NOT NULL PRIMARY KEY,
 GroupName VARCHAR(255) NOT NULL
);

SELECT * FROM tblGroup;

SET IDENTITY_INSERT tblGroup ON

--Insert data from old table ("Group" is a reserved word in SQL, poor choice for attribute name...)
INSERT INTO tblGroup (GroupID, GroupName)
SELECT ID, [Group]
FROM Groups;

SET IDENTITY_INSERT tblGroup OFF

SELECT * FROM tblGroup;

----------------- SubCategory ---------------------

--Subcategories contains redundant denormalized data.
SELECT * FROM SubCategories;

CREATE TABLE tblSubCategory
(
 SubCategoryID INT IDENTITY(25, 1) NOT NULL PRIMARY KEY,
 SubCategoryName VARCHAR(255) NOT NULL,
 Phase VARCHAR(255) NOT NULL,
 PhaseID INT 
)

SET IDENTITY_INSERT tblSubCategory ON

INSERT INTO tblSubCategory (SubCategoryID, SubCategoryName, Phase)
SELECT id, SubCategory, Phase FROM SubCategories;

SET IDENTITY_INSERT tblSubCategory OFF

SELECT * FROM tblSubCategory;

----------------- Phase ---------------------

--Projection to extract redundant Phase data as a separate table
CREATE TABLE tblPhase
(
 PhaseID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
 phaseName VARCHAR(255) NOT NULL
);

INSERT INTO tblPhase (phaseName)
SELECT DISTINCT Phase
FROM SubCategories;

SELECT * FROM tblPhase;

--Insert FK values
UPDATE tblSubCategory
SET tblSubCategory.PhaseID=tblPhase.phaseID
FROM tblSubCategory, tblPhase
WHERE tblSubCategory.Phase=tblPhase.phaseName;

SELECT * FROM tblSubCategory;

--Drop Phase from tblSubCategory now that we have linked the two tables
ALTER TABLE tblSubCategory
DROP COLUMN Phase;

SELECT * FROM tblSubCategory;

--Enforce referential constraint
ALTER TABLE tblSubCategory
ADD CONSTRAINT fk_PhaseSubCategory
FOREIGN KEY (PhaseID)
REFERENCES tblPhase(PhaseID);

--Make FK required
ALTER TABLE tblSubCategory
ALTER COLUMN PhaseID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblPhase INNER JOIN tblSubCategory on tblPhase.PhaseID=tblSubCategory.PhaseID;

----------------- Publicity ---------------------

--Publicity (contains redundancy - multiple rows)
SELECT * FROM Publicity;

CREATE TABLE tblPublicity
(
 PublicityID INT IDENTITY(20, 1) NOT NULL PRIMARY KEY,
 PublicityName VARCHAR(255) NOT NULL
)

SELECT * FROM tblPublicity;

SET IDENTITY_INSERT tblPublicity ON

--Remove duplicates
INSERT INTO tblPublicity (PublicityID, PublicityName)
SELECT DISTINCT id, Publicity
FROM Publicity;

SET IDENTITY_INSERT tblPublicity OFF

--Now unique values
SELECT * FROM tblPublicity;


----------------- Priority ---------------------


--I don't see Priority in any of the existing tables. Will create a table
CREATE TABLE tblPriority
(
 PriorityID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
 PriorityName VARCHAR(255) NOT NULL
)

--Insert values from the Access application
--Again, not sure why id is included in priority name. 
INSERT INTO tblPriority (PriorityName) VALUES ('1 - High');
INSERT INTO tblPriority (PriorityName) VALUES ('2 - Normal');
INSERT INTO tblPriority (PriorityName) VALUES ('3 - Low');
INSERT INTO tblPriority (PriorityName) VALUES ('4 - Info Only');
INSERT INTO tblPriority (PriorityName) VALUES ('5 - Recurring');

SELECT * FROM tblPriority;

----------------- Project ---------------------

/*
Will work on attributes left to right connecting PK and FK and revising
*/

SELECT * FROM Projects;

--Extract (project) EndUser as a table. This is an optional attribute. I am including it as a required attribute for illustration

SELECT DISTINCT [End User] FROM Projects;

--Replace NULL with 'NA'
UPDATE Projects SET [End User] = 'NA' WHERE [End User] IS NULL;

CREATE TABLE tblEndUser
(
 EndUserID INT IDENTITY(1,1) NOT NULL PRIMARY  KEY,
 EndUserName VARCHAR(255) NOT NULL
);

--Populate new table
INSERT INTO tblEndUser (EndUserName)
SELECT DISTINCT [End User] FROM Projects;

SELECT * FROM tblEndUser;

--That looks like EndUser is the only denormalized attribute requiring a new table in Projects

SELECT * FROM projects ORDER BY id desc;

SELECT MAX(LEN([Comments])) FROM Projects;

--DROP TABLE tblProject;
--Create FK attributes
CREATE TABLE tblProject
(
 ProjectID INT IDENTITY (1500, 1) NOT NULL PRIMARY KEY,
 EndUser VARCHAR(255),
 EndUserID INT,
 [Assigned To] VARCHAR(255),
 AssignedTo INT,
 [Opened By] VARCHAR(255),
 OpenedBy INT,
 OpenedDate DATETIME,
 Status VARCHAR(255),
 StatusID INT,
 ProjectName VARCHAR(255),
 SubCategory VARCHAR(255),
 Priority VARCHAR(255),
 PriorityID INT, 
 Description VARCHAR(2000),
 ScheduledStart DATETIME,
 ActualStart DATETIME,
 ScheduledFinish DATETIME,
 EstFinish VARCHAR(255),
 ActualFinish DATETIME,
 EstDurationDays INT,
 DateModified DATETIME,
 RelatedIssues VARCHAR(4000),
 Comments VARCHAR(MAX),
 Publicity VARCHAR(255),
 PublicityID INT,
 PctComplete FLOAT,
 MgrComments VARCHAR(4000),
 [Group] VARCHAR(255),
 GroupID INT
);

SELECT * FROM tblProject;

--Insert values from previous table
SET IDENTITY_INSERT tblProject ON

INSERT INTO tblProject (ProjectID, [EndUser],[Assigned To],[Opened By],[OpenedDate],[Status],[ProjectName],
                       [SubCategory],[Priority],[Description],[ScheduledStart],[ActualStart],[ScheduledFinish],
					   [EstFinish],[ActualFinish],[EstDurationDays],[DateModified],[RelatedIssues],[Comments],
					   [Publicity],[PctComplete],[MgrComments],[Group])
SELECT [ID],[End User],[Assigned To],[Opened By],[Opened Date],[Status],[Project],[SubCategory],[Priority],[Description],
       [Scheduled Start],[Actual Start],[Scheduled Finish],[Est Finish],[Actual Finish],[Est Duration Days],
	   [Date Modified],[Related Issues],[Comments],[Publicity],[% Complete],[Mgr Comments],[Group]
FROM Projects

SET IDENTITY_INSERT tblProject OFF

SELECT * FROM tblProject;

--Working left to right, replace data attributes with FK attributes

--EndUser
--Insert FK values
UPDATE tblProject
SET tblProject.EndUserID=tblEndUser.EndUserID
FROM tblProject, tblEndUser
WHERE tblProject.EndUser=tblEndUser.EndUserName;

SELECT * FROM tblProject;

--Drop Phase from tblSubCategory now that we have linked the two tables
ALTER TABLE tblProject
DROP COLUMN EndUser;

SELECT * FROM tblProject;

--Enforce referential constraint
ALTER TABLE tblProject
ADD CONSTRAINT fk_ProjectEndUser
FOREIGN KEY (EndUserID)
REFERENCES tblEndUser(EndUserID);

--Make FK required
ALTER TABLE tblProject
ALTER COLUMN EndUserID INT NOT NULL


--Join two tables to test relationship
SELECT * 
FROM tblProject INNER JOIN tblEndUser on tblProject.EndUserID=tblEndUser.EndUserID;


--AssignedTo
--Insert FK values
UPDATE tblProject
SET tblProject.AssignedTo=tblContact.ContactID
FROM tblProject, tblContact
WHERE tblProject.[Assigned To]= tblContact.Firstname + ' ' + tblContact.LastName;

--Only updated 46 rows. There must be some values for [Assigned To] that do not exist in tblContact

SELECT [Assigned To] FROM tblProject WHERE AssignedTo IS NULL;

SELECT * FROM tblContact WHERE LastName IN('Yauch','Kelly');

--Shortened name in the Project attribute. Update tblProject to use actual first name
UPDATE tblProject SET [Assigned To] = 'Christopher Yauch' WHERE [Assigned To] = 'Chris Yauch';
UPDATE tblProject SET [Assigned To] = 'Christine Kelly' WHERE [Assigned To] = 'Christy Kelly'

--Rerun assignment
--Insert FK values
UPDATE tblProject
SET tblProject.AssignedTo=tblContact.ContactID
FROM tblProject, tblContact
WHERE tblProject.[Assigned To]= tblContact.Firstname + ' ' + tblContact.LastName;

--Drop [Assigned To]
ALTER TABLE tblProject
DROP COLUMN [Assigned To];

SELECT * FROM tblProject;

--Enforce referential constraint
ALTER TABLE tblProject
ADD CONSTRAINT fk_ProjectAssignedTo
FOREIGN KEY (AssignedTo)
REFERENCES tblContact(ContactID);

--Make FK required
ALTER TABLE tblProject
ALTER COLUMN AssignedTo INT NOT NULL

SELECT * FROM tblContact;

--Join two tables to test relationship
SELECT * 
FROM tblProject INNER JOIN tblContact on tblProject.AssignedTo=tblContact.ContactID;

--OpenedBy
--Insert FK values
UPDATE tblProject
SET tblProject.OpenedBy=tblContact.ContactID
FROM tblProject, tblContact
WHERE tblProject.[Opened By]= tblContact.Firstname + ' ' + tblContact.LastName;

--Only updated 45 rows. There must be some values for [Assigned To] that do not exist in tblContact

SELECT [Opened By] FROM tblProject WHERE OpenedBy IS NULL;

SELECT * FROM tblContact WHERE LastName IN('Yauch','Herndon');

--Shortened name in the Project attribute. Update tblProject to use actual first name
UPDATE tblProject SET [Opened By] = 'Christopher Yauch' WHERE [Opened By] = 'Chris Yauch';
UPDATE tblProject SET [Opened By] = 'William Herndon' WHERE [Opened By] = 'Bill Herndon'

--Rerun assignment
--Insert FK values
UPDATE tblProject
SET tblProject.OpenedBy=tblContact.ContactID
FROM tblProject, tblContact
WHERE tblProject.[Opened By]= tblContact.Firstname + ' ' + tblContact.LastName;

--Drop [Assigned To]
ALTER TABLE tblProject
DROP COLUMN [Opened By];

SELECT * FROM tblProject;

--Enforce referential constraint
ALTER TABLE tblProject
ADD CONSTRAINT fk_ProjectOpenedBy
FOREIGN KEY (OpenedBy)
REFERENCES tblContact(ContactID);

--Make FK required
ALTER TABLE tblProject
ALTER COLUMN OpenedBy INT NOT NULL

SELECT * FROM tblContact;

--Join two tables to test relationship
SELECT * 
FROM tblProject INNER JOIN tblContact on tblProject.OpenedBy=tblContact.ContactID;


--Status
--Insert FK values
UPDATE tblProject
SET tblProject.StatusID=tblStatus.StatusID
FROM tblProject, tblStatus
WHERE tblProject.Status= tblStatus.StatusName;


--Drop Status
ALTER TABLE tblProject
DROP COLUMN Status;

SELECT * FROM tblProject;

--Enforce referential constraint
ALTER TABLE tblProject
ADD CONSTRAINT fk_ProjectStatus
FOREIGN KEY (StatusID)
REFERENCES tblStatus(StatusID);

--Make FK required
ALTER TABLE tblProject
ALTER COLUMN StatusID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblProject INNER JOIN tblStatus on tblProject.StatusID=tblStatus.StatusID;


--Priority
--Insert FK values
UPDATE tblProject
SET tblProject.PriorityID=tblPriority.PriorityID
FROM tblProject, tblPriority
WHERE tblProject.Priority= tblPriority.PriorityName;

--Drop Priority
ALTER TABLE tblProject
DROP COLUMN Priority;

SELECT * FROM tblProject;

--Enforce referential constraint
ALTER TABLE tblProject
ADD CONSTRAINT fk_ProjectPrority
FOREIGN KEY (PriorityID)
REFERENCES tblPriority(PriorityID);

--Make FK required
ALTER TABLE tblProject
ALTER COLUMN PriorityID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblProject INNER JOIN tblPriority on tblProject.StatusID=tblPriority.PriorityID;

--Publicity
--Insert FK values
UPDATE tblProject
SET tblProject.PublicityID=tblPublicity.PublicityID
FROM tblProject, tblPublicity
WHERE tblProject.Publicity=tblPublicity.PublicityName;

--Publicity contains NULL values
SELECT * FROM tblPublicity;

--Update NULL to 'None'
UPDATE tblProject SET Publicity = 'None' WHERE Publicity IS NULL;

--Rerun
--Insert FK values
UPDATE tblProject
SET tblProject.PublicityID=tblPublicity.PublicityID
FROM tblProject, tblPublicity
WHERE tblProject.Publicity=tblPublicity.PublicityName;

--Drop Publicity
ALTER TABLE tblProject
DROP COLUMN Publicity;

SELECT * FROM tblProject;

--Enforce referential constraint
ALTER TABLE tblProject
ADD CONSTRAINT fk_ProjectPublicity
FOREIGN KEY (PublicityID)
REFERENCES tblPublicity(PublicityID);

--Make FK required
ALTER TABLE tblProject
ALTER COLUMN PublicityID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblProject INNER JOIN tblPublicity on tblProject.PublicityID=tblPublicity.PublicityID;


--Group
--Insert FK values
UPDATE tblProject
SET tblProject.GroupID=tblGroup.GroupID
FROM tblProject, tblGroup
WHERE tblProject.[Group]=tblGroup.GroupName;

--There is a group not in tblGroup: BDW. It isn't in the original table Groups
SELECT * FROM tblGroup;

SELECT * FROM tblProject WHERE GroupID is null;

--Add it to tblGroup
INSERT INTO tblGroup (GroupName) VALUES ('BDW');

--Rerun insert fk

--Drop Group
ALTER TABLE tblProject
DROP COLUMN [group];

SELECT * FROM tblProject;

--Enforce referential constraint
ALTER TABLE tblProject
ADD CONSTRAINT fk_ProjectGroup
FOREIGN KEY (GroupID)
REFERENCES tblGroup(GroupID);

--Make FK required
ALTER TABLE tblProject
ALTER COLUMN GroupID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblProject INNER JOIN tblGroup on tblProject.groupID=tblGroup.GroupID;

SELECT * FROM tblSubCategory;

----------------- Tasks ---------------------

/*
Will work left to right. For the purposes of a demonstration project, will only 
use a subset of the attributes and relationships. These can, of course, be added later.
*/

SELECT * FROM tasks;

--Find the last TaskID to seed the IDENTITY stream
SELECT MAX(ID) FROM tasks;

--DROP TABLE tblTask;

CREATE TABLE tblTask
(
 TaskID INT IDENTITY (5500, 1) NOT NULL PRIMARY KEY,
 Project VARCHAR(255),
 ProjectID INT,
 Title VARCHAR(255),
 EndUser VARCHAR(255),
 AssignedTo VARCHAR(255),
 OpenedBy VARCHAR(255),
 OpenedDate DATETIME,
 Status VARCHAR(255),
 StatusID INT,
 SubCategory VARCHAR(255),
 SubCategoryID INT,
 Priority VARCHAR(255),
 PriorityID INT, 
 Description VARCHAR(2000),
 ScheduledStart DATETIME,
 ActualStart DATETIME,
 ScheduledFinish DATETIME,
 EstFinish VARCHAR(255),
 ActualFinish DATETIME,
 EstDurationDays INT,
 DateModified DATETIME,
 RelatedIssues VARCHAR(4000),
 Comments VARCHAR(MAX),
 Publicity VARCHAR(255),
 PctComplete FLOAT,
 GroupName VARCHAR(255),
 IISR INT,
 Atch BIT
);

SELECT * FROM tblTask;

--Insert values from previous table
SET IDENTITY_INSERT tblTask ON

INSERT INTO tblTask (TaskID, Project, Title, EndUser, AssignedTo, OpenedBy, OpenedDate, Status, SubCategory,
                     Priority, Description, ScheduledStart, ActualStart, ScheduledFinish,
					 EstFinish, ActualFinish, EstDurationDays, DateModified, RelatedIssues, Comments, Publicity,
					 PctComplete, GroupName, IISR, Atch)
SELECT [ID], [Project], [Title], [End User], [Assigned To], [Opened By], [Opened Date], [Status], [SubCategory],
       [Priority], [Description], [Scheduled Start], [Actual Start], [Scheduled Finish], [Est Finish],
	   [Actual Finish], [Est Duration Days], [Date Modified], [Related Issues], [Comments], [Publicity],
	   [% Complete], [Group], [IISR], [Atch]
FROM Tasks;

SET IDENTITY_INSERT tblTask OFF

SELECT * FROM tblTask;

--Working left to right, replace data attributes with FK attributes

--Project
--Insert FK values
UPDATE tblTask
SET tblTask.ProjectID=tblProject.ProjectID
FROM tblTask, tblProject
WHERE tblTask.Project=tblProject.ProjectName;

--Only 36 rows mathced a project.

--Check for NULL
SELECT * FROM tblTask WHERE Project IS NULL;

--Find tasks that do not match a project
SELECT DISTINCT Project 
FROM tblTask
WHERE Project NOT IN(SELECT Project FROM tblProject);

/*
There are 26 tasks for which there is no project. I'll create
new project entries and leave non-FK attributes NULL just for completeness.
Add corresponding rows with valid FK values.
*/

INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Admin', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'BDM Reports', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'BDW Extracts', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Bill Gate Charts and Graphs', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Bill Pass Through Metrics', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'CDRL Trac', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Companion Reports', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Data and Metrics Backups', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Data and Metrics Processing', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'GLA Numbers', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'IE Budget Ledgers', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'IE PPA Manager', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'IE Quality Metrics', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Labor Rejects', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'MARS Imports', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'MARS Issues', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'MCS and Phase Dates', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Metrics Catalog', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'MOOR - Portal', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'New Requests/IISRs', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'PAR (Progress Assist Reporting) Manager', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Planning Change Tracking System (PCTS)', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Redesign PAT', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'S Curve Metrics', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'Super Tables', 2, 5, 2)
INSERT INTO tblProject (EndUserID, AssignedTo, OpenedBy, StatusID, ProjectName, PriorityID, PublicityID, GroupID) VALUES (11, 2, 2, 5, 'TALE - PMB based', 2, 5, 2)

--Try it again.
--Insert FK values
UPDATE tblTask
SET tblTask.ProjectID=tblProject.ProjectID
FROM tblTask, tblProject
WHERE tblTask.Project=tblProject.ProjectName;

SELECT * FROM tblTask;

--Drop Status
ALTER TABLE tblTask
DROP COLUMN Project;

SELECT * FROM tblTask;

--Enforce referential constraint
ALTER TABLE tblTask
ADD CONSTRAINT fk_TaskProject
FOREIGN KEY (ProjectID)
REFERENCES tblProject(ProjectID);

--Make FK required
ALTER TABLE tblTask
ALTER COLUMN ProjectID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblTask INNER JOIN tblProject on tblTask.ProjectID=tblProject.ProjectID


--Status
--Insert FK values
UPDATE tblTask
SET tblTask.StatusID=tblStatus.StatusID
FROM tblTask, tblStatus
WHERE tblTask.Status= tblStatus.StatusName;

--Drop Status
ALTER TABLE tblTask
DROP COLUMN Status;

SELECT * FROM tblTask;

--Enforce referential constraint
ALTER TABLE tblTask
ADD CONSTRAINT fk_TaskStatus
FOREIGN KEY (StatusID)
REFERENCES tblStatus(StatusID);

--Make FK required
ALTER TABLE tblTask
ALTER COLUMN StatusID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblTask INNER JOIN tblStatus on tblTask.StatusID=tblStatus.StatusID;

SELECT * FROM tblSubCategory;

--SubCategory

--Set all NULL FK values to SubCategory "Discontinued".
UPDATE tblTask
SET SubCategory = 'Discontinued'
WHERE SubCategory IS NULL;

--Insert FK values
UPDATE tblTask
SET tbltask.SubCategoryID=tblSubCategory.SubCategoryID
FROM tblProject, tblSubCategory
WHERE tblTask.SubCategory=tblSubCategory.SubCategoryName;

--Drop SubCategory
ALTER TABLE tblTask
DROP COLUMN SubCategory;

SELECT * FROM tblTask;

--Enforce referential constraint
ALTER TABLE tblTask
ADD CONSTRAINT fk_TaskSubCategory
FOREIGN KEY (SubCategoryID)
REFERENCES tblSubCategory(SubCategoryID);

--Make FK required
ALTER TABLE tblTask
ALTER COLUMN SubCategoryID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblTask INNER JOIN tblSubCategory on tblTask.SubCategoryID=tblSubCategory.SubCategoryID;

--Priority
--Insert FK values
UPDATE tblTask
SET tblTask.PriorityID=tblPriority.PriorityID
FROM tblTAsk, tblPriority
WHERE tblTask.Priority= tblPriority.PriorityName;

--Drop Priority
ALTER TABLE tblTask
DROP COLUMN Priority;

SELECT * FROM tblTask;

--Enforce referential constraint
ALTER TABLE tblTask
ADD CONSTRAINT fk_TaskPrority
FOREIGN KEY (PriorityID)
REFERENCES tblPriority(PriorityID);

--Make FK required
ALTER TABLE tblTask
ALTER COLUMN PriorityID INT NOT NULL

--Join two tables to test relationship
SELECT * 
FROM tblTask INNER JOIN tblPriority on tblTask.StatusID=tblPriority.PriorityID;

SELECT * FROM tblTask;


--Create denormalized view for "details" portion of /Project/Edit
CREATE VIEW vwTask
AS
SELECT tblTask.TaskID, tblTask.ProjectID, tblTask.Title, tbltask.EndUser, tbltask. AssignedTo,
       tblStatus.StatusName, tblSubCategory.SubCategoryName, tblPriority.PriorityName,
	   tblTask.GroupName 
FROM tblPriority INNER JOIN
     tblTask ON tblPriority.PriorityID = tblTask.PriorityID INNER JOIN
     tblStatus ON tblTask.StatusID = tblStatus.StatusID INNER JOIN
     tblSubCategory ON tblTask.SubCategoryID = tblSubCategory.SubCategoryID;

select * from vwTask;

--This produces the details for the master record 858
SELECT *
FROM vwTask
WHERE vwTask.ProjectID = 989;

SELECT * FROM tblStatus;

--Cascade delete and lazy delete
DELETE tblProject WHERE ProjectID = 989;


/*
Area used to write queries for app development
*/

select * from tbltask;
SELECT * FROM tblProject where projectid = 837;


SELECT *
FROM tblProject INNER JOIN tblTask ON 
     tblProject.ProjectID=tblTask.ProjectID;








